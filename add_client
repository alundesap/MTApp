#!/bin/bash
do_run=1 # Execute(evaluate) the commands
#do_run=0 # Don't evaluate any commands
#
MY_DIR=$(dirname $(readlink -f $0))
. $MY_DIR/common.sh
#echo $?
if [ $? -eq 1 ]; then
  echo ""
  echo "Copy the $MY_DIR/common.sh.template file to $MY_DIR/common.sh and adjust before continuing."
  echo ""
  cmd='cp '$MY_DIR/common.sh.template' '$MY_DIR/common.sh
  echo $cmd
  echo ""
  cmd='vi '$MY_DIR/common.sh
  echo $cmd
  echo ""
  exit
fi
echo ""
echo "Including common.sh from "$MY_DIR
echo ""
echo "host:$host port:$port tenant:$tenant org:$org xsa_user:$xsa_user"
xsorcf=$1
client=$2
version=$3
space=$4
echo "xsorcf:$xsorcf client:$client space:$space"
echo ""
#exit
dowait=""
doexport1=""
doexport2=""
if [ "$#" -eq 4 ]; then
  if [ $xsorcf = "xs" ]; then
    dowait=" --wait-indefinitely"
    doexport1=" --export-json /dev/stdout 2>/dev/null | tail -n +5"
    echo "XS cool."
  else
    if [ $xsorcf = "cf" ]; then
      doexport1=" | tail -n +5 | head -n -8"
      doexport2=" | head -n -1"
      echo "CF cool."
    else
      echo "Not XS or CF, try again."
      exit 1
    fi
  fi

  client_uc=$(echo "$client" | tr a-z A-Z)
  client_lc=$(echo "$client" | tr A-Z a-z)

  version_uc=$(echo "$version" | tr a-z A-Z)
  version_lc=$(echo "$version" | tr A-Z a-z)

  echo Adding Client $client_uc into Org: $org Space: $space with Version: $version_uc Starting...
  echo ""
  cmd='npm config set @sap:registry "https://npm.sap.com/" ; npm config set registry "https://registry.npmjs.org/" ; npm config set strict-ssl true'
  echo $cmd
  echo ""
  if [ $do_run -eq 1 ]; then echo "Do Run!"; else echo "Dry Run!"; fi
  echo ""

  cmd=$xsorcf' target -o '$org
  echo $cmd
  eval $cmd

  cmd=$xsorcf' space '$space
  echo $cmd
  eval $cmd
  RESULT=$?

  echo 'RESULT:'$RESULT

  if [ $RESULT -ne 0 ]; then
    cmd=$xsorcf' create-space '$space' -o '$org
    echo "====="
    echo $cmd
    echo "====="
    if [ $do_run -eq 1 ]; then eval $cmd; fi

    cmd=$xsorcf' set-space-role XSA_ADMIN,'$xsa_user' '$org' '$space' SpaceDeveloper'
    echo "====="
    echo $cmd
    echo "====="
    if [ $do_run -eq 1 ]; then eval $cmd; fi

    cmd=$xsorcf' map-tenant-database '$tenant' -o '$org' -s '$space
    echo "====="
    echo $cmd
    echo "====="
    if [ $do_run -eq 1 ]; then eval $cmd; fi

    cmd='echo "Deploy First!"'
    echo $cmd
  fi

  cmd=$xsorcf' target -o '$org' -s '$space
  echo "====="
  echo $cmd
  echo "====="
  eval $cmd

#xs push blackz_db_v0 -p db_client/ -m 256M -k 256M --no-route --no-start
#find . -name '.vfs' -exec rm -rf {} \;

  cmd=$xsorcf' push '$client_lc'_db_'$version_lc' -p db_client/ -m 256M -k 256M --no-route --no-start'
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

#xs cs hana hdi-shared BLACKZ_V0 -t client_v0

  service='hana'
  plan='hdi-shared'

  cmd=$xsorcf' create-service '$service' '$plan' '$client_uc'_'$version_uc' -t '$client_lc'_'$version_lc' -c '"'"'{"schema": "'$client_uc'_'$version_uc'_'$space'"}'"'"''
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  if [ $RESULT -ne 0 ]; then
    cmd=$xsorcf' create-service '$service' '$plan' '$client_uc'_'$version_uc' -t '$client_lc'_'$version_lc' -c '"'"'{"schema": "'$client_uc'_'$version_uc'_'$space'"}'"'"''
    echo "====="
    echo $cmd
    echo "====="
    if [ $do_run -eq 1 ]; then eval $cmd; fi
  fi
  
  cmd=$xsorcf' service '$client_uc'_'$version_uc
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'HDI CREATE RESULT:'$RESULT

  if [ $xsorcf = "xs" ]; then
    cmd=$xsorcf' service '$client_uc'_'$version_uc
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    RESULT=$?
    #echo 'RESULT:'$RESULT
  else
    # Handle CF creation of services a bit differently
    # cf services | grep dat368-hdi | grep "create succeeded"
    cmd=$xsorcf' services | grep '$client_uc'_'$version_uc' | grep "create succeeded"'
    echo "====="
    echo $cmd
    echo "====="
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    RESULT=$?
    #echo 'RESULT:'$RESULT
  fi

  # Service creation is NOT guarenteed to happen right away
  # Might want to add a timeout counter...
  while [ $RESULT -ne 0 ]; do
    echo "Sleeping for 10secs..."
    sleep 10

    if [ $xsorcf = "xs" ]; then
      cmd=$xsorcf' service '$client_uc'_'$version_uc
      echo "====="
      echo $cmd
      echo "====="
      if [ $do_run -eq 1 ]; then eval $cmd; fi
      RESULT=$?
      #echo 'RESULT:'$RESULT
    else
      # Handle CF creation of services a bit differently
      # cf services | grep dat368-hdi | grep "create succeeded"
      cmd=$xsorcf' services | grep '$client_uc'_'$version_uc' | grep "create succeeded"'
      echo $cmd
      if [ $do_run -eq 1 ]; then eval $cmd; fi
      RESULT=$?
      #echo 'RESULT:'$RESULT
    fi
  done 

#xs bind-service blackz_db_v0 BLACKZ_V0

  cmd=$xsorcf' bind-service '$client_lc'_db_'$version_lc' '$client_uc'_'$version_uc
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

#xs bs blackz_db_v0 MASTER_V0

  cmd=$xsorcf' bind-service '$client_lc'_db_'$version_lc' MASTER_'$version_uc
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

#xs set-env blackz_db_v0 TARGET_CONTAINER BLACKZ_V0

  cmd=$xsorcf' set-env '$client_lc'_db_'$version_lc' TARGET_CONTAINER '$client_uc'_'$version_uc
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

#xs set-env blackz_db_v0 SERVICE_REPLACEMENTS '[{"key":"POC_log-table-grantor","service": "MASTER_V0"}]'
# '  '"'"'

  cmd=$xsorcf' set-env '$client_lc'_db_'$version_lc' SERVICE_REPLACEMENTS '"'"'[{"key":"POC_log-table-grantor","service": "MASTER_V0"}]'"'"
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

#xs restart blackz_db_v0

  cmd=$xsorcf' restart '$client_lc'_db_'$version_lc
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

#sleep 10

  cmd='sleep 10'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

#xs logs blackz_db_v0 --recent | grep "Application can be stopped."

  cmd=$xsorcf' logs '$client_lc'_db_'$version_lc' --recent | grep "Application can be stopped."'
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'HDI CREATE RESULT:'$RESULT

  # HDI is NOT guarenteed finish instantly
  while [ $RESULT -ne 0 ]; do
    sleep 10
    cmd=$xsorcf' logs '$client_lc'_db_'$version_lc' --recent | grep "Application can be stopped."'
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi
    RESULT=$?

    echo 'RESULT:'$RESULT
    # Handle CF creation of services a bit differently
    # cf services | grep dat368-hdi | grep "create succeeded"
  done 

#xs stop blackz_db_v0

  cmd=$xsorcf' stop '$client_lc'_db_'$version_lc
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

  echo ""

  echo "-----------------------------------------------------"
  cmd='HDI_SCHEMA=$('$xsorcf' env '$client_lc'_db_'$version_lc' '$doexport1' | jq -r '"'"'.VCAP_SERVICES.hana[0].credentials.schema'"'"$doexport2')'
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  echo 'export HDI_SCHEMA='$HDI_SCHEMA

  cmd='HDI_USER=$('$xsorcf' env '$client_lc'_db_'$version_lc' '$doexport1' | jq -r '"'"'.VCAP_SERVICES.hana[0].credentials.user'"'"$doexport2')'
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  echo 'export HDI_USER='$HDI_USER

  cmd='HDI_PASS=$('$xsorcf' env '$client_lc'_db_'$version_lc' '$doexport1' | jq -r '"'"'.VCAP_SERVICES.hana[0].credentials.password'"'"$doexport2')'
  #echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  echo 'export HDI_PASS='$HDI_PASS
  echo "-----------------------------------------------------"

  #exit 1

  cmd='hdbsql -i '$inst' -n '$host':'$port' -d '$tenant' -u '$HDI_USER' -p '$HDI_PASS' '"'"'CALL "'$HDI_SCHEMA'"."ins_legal_entity"(IN_ENTITY_NAME => '"'"'"'"'"'"'"'"''$client''"'"'"'"'"'"'"'"',IN_JUSTICTION => 1,EX_MESSAGE => ?)'"'"''
  echo "====="
  echo $cmd
  echo "====="
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  
else
    echo "Usage ./add_client xs[cf] client version tospace"
    exit 1
fi
echo ""
echo Add Client $client Push Finished
echo ""
