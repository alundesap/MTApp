#!/bin/bash
do_run=1 # Execute(evaluate) the commands
#do_run=0 # Don't evaluate any commands
#
MY_DIR=$(dirname $(readlink -f $0))
. $MY_DIR/common.sh
#echo $?
if [ $? -eq 1 ]; then
  echo ""
  echo "Copy the $MY_DIR/common.sh.template file to $MY_DIR/common.sh and adjust before continuing."
  echo ""
  cmd='cp '$MY_DIR/common.sh.template' '$MY_DIR/common.sh
  echo $cmd
  echo ""
  cmd='vi '$MY_DIR/common.sh
  echo $cmd
  echo ""
  exit
fi
echo ""
echo "Including common.sh from "$MY_DIR
echo ""
echo "host:$host port:$port tenant:$tenant org:$org xsa_user:$xsa_user"
xsorcf=$1
client=$2
version=$3
space=$4
echo "xsorcf:$xsorcf client:$client space:$space"
echo ""
#exit
dowait=""
doexport1=""
doexport2=""
if [ "$#" -eq 4 ]; then
  if [ $xsorcf = "xs" ]; then
    dowait=" --wait-indefinitely"
    doexport1=" --export-json /dev/stdout 2>/dev/null | tail -n +5"
    echo "XS cool."
  else
    if [ $xsorcf = "cf" ]; then
      doexport1=" | tail -n +5 | head -n -8"
      doexport2=" | head -n -1"
      echo "CF cool."
    else
      echo "Not XS or CF, try again."
      exit 1
    fi
  fi

  client_uc=$(echo "$client" | tr a-z A-Z)
  client_lc=$(echo "$client" | tr A-Z a-z)

  version_uc=$(echo "$version" | tr a-z A-Z)
  version_lc=$(echo "$version" | tr A-Z a-z)

  echo Deleting Client $client_uc into Org: $org Space: $space with Version: $version_uc Starting...
  echo ""
  cmd='npm config set @sap:registry "https://npm.sap.com/" ; npm config set registry "https://registry.npmjs.org/" ; npm config set strict-ssl true'
  echo $cmd
  echo ""
  if [ $do_run -eq 1 ]; then echo "Do Run!"; else echo "Dry Run!"; fi
  echo ""

  cmd=$xsorcf' target -o '$org
  echo $cmd
  eval $cmd

  cmd=$xsorcf' space '$space
  echo $cmd
  eval $cmd
  RESULT=$?

  echo 'RESULT:'$RESULT

  if [ $RESULT -ne 0 ]; then
    cmd=$xsorcf' create-space '$space' -o '$org
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi

    cmd=$xsorcf' set-space-role XSA_ADMIN,'$xsa_user' '$org' '$space' SpaceDeveloper'
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi

    cmd=$xsorcf' map-tenant-database '$tenant' -o '$org' -s '$space
    echo $cmd
    if [ $do_run -eq 1 ]; then eval $cmd; fi

    cmd='echo "Deploy First!"'
    echo $cmd
  fi

  cmd=$xsorcf' target -o '$org' -s '$space
  echo $cmd
  eval $cmd


#xs cs hana hdi-shared BLACKZ_V0 -t client_v0

  service='hana'
  plan='hdi-shared'

#xs us beta_db_v0 MASTER_V0

  cmd=$xsorcf' us '$client_lc'_db_'$version_lc' MASTER_'$version_uc
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  cmd=$xsorcf' us '$client_lc'_db_'$version_lc' '$client_uc'_'$version_uc
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT
  #exit 1

#xs d blackz_db_v0

  cmd=$xsorcf' d '$client_lc'_db_'$version_lc' -f'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

#xs ds BETA_V0 -f 

  cmd=$xsorcf' ds '$client_uc'_'$version_uc' -f'
  echo $cmd
  if [ $do_run -eq 1 ]; then eval $cmd; fi
  RESULT=$?

  echo 'RESULT:'$RESULT

  #exit 1

  echo ""

else
    echo "Usage ./del_client xs[cf] client version tospace"
    exit 1
fi
echo ""
echo Delete Client $client Push Finished
echo ""
